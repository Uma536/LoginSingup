{"version":3,"sources":["./src/app/modules/login/singup/singup.component.ts","./src/app/modules/login/singup/singup.component.html","./src/app/modules/login/login/login.component.ts","./src/app/modules/login/login/login.component.html","./src/environments/environment.ts","./src/app/modules/login/error.interceptor.ts","./src/app/modules/login/backend.interceptor.ts","./src/app/modules/login/services/user.service.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/environments/environment.prod.ts","./src/app/modules/login/login.module.ts","./src/app/modules/login/services/authentication.service.ts","./src/app/modules/login/home/home.component.ts","./src/app/modules/login/home/home.component.html","./src/app/modules/login/login.guard.ts","./src/app/app-routing.module.ts","./src/app/modules/login/jwt.interceptor.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { UserService } from '../services/user.service';\nimport { first } from 'rxjs/operators';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n@Component({\n  selector: 'app-singup',\n  templateUrl: './singup.component.html',\n  styleUrls: ['./singup.component.scss']\n})\nexport class SingupComponent implements OnInit {\n  registerForm: FormGroup;\n  loading = false;\n  submitted = false;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private router: Router,\n    private authenticationService: AuthenticationService,\n    private userService: UserService,\n    private snackBar: MatSnackBar,\n  ) {\n    // redirect to home if already logged in\n    if (this.authenticationService.currentUserValue) {\n      this.router.navigate(['/home']);\n    }\n  }\n\n  ngOnInit() {\n    this.registerForm = this.formBuilder.group({\n      firstName: [null, [Validators.required, Validators.pattern(\"[a-zA-Z]*\")]],\n      lastName: [null, [Validators.required, Validators.pattern(\"[a-zA-Z]*\")]],\n      email: [null, [Validators.required, Validators.email, Validators.pattern('^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$')]],\n      username: [null, [Validators.required, Validators.minLength(3)]],\n      password: [null, [Validators.required, Validators.minLength(6)]]\n    });\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.registerForm.controls; }\n\n  onSubmit() {\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this.loading = true;\n    this.userService.register(this.registerForm.value)\n      .pipe(first())\n      .subscribe(\n        data => {\n          this.snackBar.open('Registration Succesfull', '', {\n            duration: 1000,\n          })\n          this.router.navigate(['/login']);\n        },\n        error => {\n          this.loading = false;\n          this.snackBar.open('Username is already exists', '', {\n            duration: 1000,\n          })\n        });\n    console.log(\"userservice\", this.userService)\n  }\n  onReset() {\n    this.submitted = false;\n    this.registerForm.reset();\n  }\n}\n","<div class=\"limiter\">\n<div class=\"container\">\n    <div class=\"login-card\">\n        <div class=\"login-image\">\n            <img src=\"assets/loginimage.png\">\n        </div>\n<form [formGroup]=\"registerForm\" class=\"login-form\" (ngSubmit)=\"onSubmit()\">\n<span class=\"login-form-title\">\n        User Registration\n        </span>\n    <div class=\"form-fields\">\n        <input type=\"text\" formControlName=\"firstName\" class=\"inputname\" placeholder=\"FirstName\" [ngClass]=\"{ 'is-invalid': submitted && f.firstName.errors }\" />\n        <span class=\"focus-inputname\"></span>\n        <span class=\"symbol-inputname\">\n            <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\n      </span>\n        <div *ngIf=\"submitted && f.firstName.errors\" class=\"invalid-feedback\">\n            <div *ngIf=\"f.firstName.errors.required\">First Name is required</div>\n            <div *ngIf=\"f.firstName.errors.pattern\">Name should allow only characters</div>\n        </div>\n    </div> \n    <div class=\"form-fields\">\n        <input type=\"text\" formControlName=\"lastName\" class=\"inputname\" placeholder=\"LastName\" [ngClass]=\"{ 'is-invalid': submitted && f.lastName.errors }\" />\n        <span class=\"focus-inputname\"></span>\n        <span class=\"symbol-inputname\">\n            <mat-icon matSuffix>sentiment_very_satisfied</mat-icon>\n      </span>\n        <div *ngIf=\"submitted && f.lastName.errors\" class=\"invalid-feedback\">\n            <div *ngIf=\"f.lastName.errors.required\">Last Name is required</div>\n            <div *ngIf=\"f.lastName.errors.pattern\">Name should allow only characters</div>\n        </div>\n    </div>\n    <div class=\"form-fields\">\n        <input type=\"text\" formControlName=\"email\" class=\"inputname\" placeholder=\"Email\" [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\" />\n        <span class=\"focus-inputname\"></span>\n        <span class=\"symbol-inputname\">\n            <mat-icon aria-hidden=\"false\">email</mat-icon>\n        </span>\n        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n            <div *ngIf=\"f.email.errors.required\">Email is required</div>\n            <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n        </div>\n    </div>\n    <div class=\"form-fields\">\n        <input type=\"text\" formControlName=\"username\" class=\"inputname\" placeholder=\"Username\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n        <span class=\"focus-inputname\"></span>\n        <span class=\"symbol-inputname\">\n            <mat-icon aria-hidden=\"false\">account_circle</mat-icon>\n        </span>\n        <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n            <div *ngIf=\"f.username.errors.required\">Username is required</div>\n            <div *ngIf=\"f.username.errors.minlength\">Username should be atleast 4 characters</div>\n\n        </div>\n    </div>\n    <div class=\"form-fields\">\n        <input type=\"password\" formControlName=\"password\" class=\"inputname\" placeholder=\"Password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n        <span class=\"focus-inputname\"></span>\n        <span class=\"symbol-inputname\">\n            <mat-icon aria-hidden=\"false\">visibility</mat-icon>\n        </span>\n        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n            <div *ngIf=\"f.password.errors.required\">Password is required</div>\n            <div *ngIf=\"f.password.errors.minlength\">Password must be at least 6 characters</div>\n        </div>\n    </div>\n    <div class=\"container-form-btn\">\n        <button class=\"login-form-btn\">\n            Register\n        </button>\n        <button class=\"btn btn-secondary\" type=\"reset\" (click)=\"onReset()\">Cancel</button>\n        <a routerLink=\"/login\" class=\"btn btn-secondary\">Login</a>\n    </div>  \n</form>\n</div>\n</div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\n\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  loading = false;\n  submitted = false;\n  returnUrl: string;\n\n  constructor(\n      private formBuilder: FormBuilder,\n      private route: ActivatedRoute,\n      private router: Router,\n      private authenticationService: AuthenticationService,\n      private snackBar: MatSnackBar,\n  ) {\n      // redirect to home if already logged in\n      if (this.authenticationService.currentUserValue) {\n          this.router.navigate(['/home']);\n      }\n  }\n\n  ngOnInit() {\n      this.loginForm = this.formBuilder.group({\n          username: [null, Validators.required],\n          password: [null, Validators.required]\n      });\n\n      // get return url from route parameters or default to '/'\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.loginForm.controls; }\n\n  onSubmit() {\n      this.submitted = true;\n\n      // reset alerts on submit\n      // this.alertService.clear();\n\n      // stop here if form is invalid\n      if (this.loginForm.invalid) {\n          return;\n      }\n\n      this.loading = true;\n      this.authenticationService.login(this.f.username.value, this.f.password.value)\n          .pipe(first())\n          .subscribe(\n              data => {\n                this.snackBar.open('Login Successfull', '', {\n                  duration: 1000,\n                })\n                  this.router.navigate([this.returnUrl]);\n              },\n              error => {\n                this.snackBar.open('Username or Password incorrect', '', {\n                  duration: 1000,\n                })\n                  this.loading = false;\n              });\n  }\n}\n","<div class=\"limiter\">\n    <div class=\"container\">\n        <div class=\"login-card\">\n            <div class=\"login-image\">\n                <img src=\"assets/loginimage.png\">\n            </div>\n            <form [formGroup]=\"loginForm\" class=\"login-form\" (ngSubmit)=\"onSubmit()\">\n                <span class=\"login-form-title\">\n                    Member Login\n                </span>\n                <div class=\"form-fields\">\n                    <input type=\"text\" formControlName=\"username\" class=\"inputname\" placeholder=\"Username\" [ngClass]=\"{ 'is-invalid': submitted && f.username.errors }\" />\n                    <span class=\"focus-inputname\"></span>\n                    <span class=\"symbol-inputname\">\n                        <mat-icon aria-hidden=\"false\">account_circle</mat-icon>\n                    </span>\n                    <div *ngIf=\"submitted && f.username.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.username.errors.required\">Username is required</div>\n                        <div *ngIf=\"f.username.errors.pattern\">First should allow only space characters</div>\n                    </div>\n                </div>\n                <div class=\"form-fields\">\n                    <input type=\"password\" formControlName=\"password\" class=\"inputname\" placeholder=\"Password\" [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" />\n                    <span class=\"focus-inputname\"></span>\n                    <span class=\"symbol-inputname\">\n                        <mat-icon aria-hidden=\"false\">lock</mat-icon>\n                    </span>\n                    <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                        <div *ngIf=\"f.password.errors.required\">Password is required</div>\n                    </div>\n                </div>\n                <div class=\"container-form-btn\">\n                    <button class=\"login-form-btn\" routerLink=\"/home\">\n                        Login\n                    </button>\n                </div>\n                <div class=\"text-center p-t-136\">\n                    <a routerLink=\"/signup\" class=\"txt2 right-arrow\">\n                        Create your Account\n                        <mat-icon>arrow_right_alt</mat-icon>\n                    </a>\n                </div>\n            </form>\n        </div>\n    </div>\n</div>\n\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { AuthenticationService } from './services/authentication.service';\n\n@Injectable()\nexport class ErrorInterceptor implements HttpInterceptor {\n  constructor(private authenticationService: AuthenticationService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      return next.handle(request).pipe(catchError(err => {\n          if (err.status === 401) {\n              // auto logout if 401 response returned from api\n              this.authenticationService.logout();\n              location.reload(true);\n          }\n          \n          const error = err.error.message || err.statusText;\n          return throwError(error);\n      }))\n  }\n}","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HTTP_INTERCEPTORS\n} from '@angular/common/http';\nimport { Observable, of, throwError } from 'rxjs';\nimport { mergeMap, materialize, dematerialize, delay } from 'rxjs/operators';\n// array in local storage for registered users\nlet users = JSON.parse(localStorage.getItem('users')) || [];\n\n@Injectable()\nexport class BackendInterceptor implements HttpInterceptor {\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const { url, method, headers, body } = request;\n\n    // wrap in delayed observable to simulate server api call\n    return of(null)\n        .pipe(mergeMap(handleRoute))\n        .pipe(materialize())\n        .pipe(delay(500))\n        .pipe(dematerialize());\n\n    function handleRoute() {\n        switch (true) {\n            case url.endsWith('/users/authenticate') && method === 'POST':\n                return authenticate();\n            case url.endsWith('/users/register') && method === 'POST':\n                return register();\n            case url.endsWith('/users') && method === 'GET':\n                return getUsers();\n            default:\n                // pass through any requests not handled above\n                return next.handle(request);\n        }    \n    }\n\n    // route functions\n\n    function authenticate() {\n        const { username, password } = body;\n        const user = users.find(x => x.username === username && x.password === password);\n        console.log(\"users\",user)\n        if (!user) return error('Username or password is incorrect');\n        return ok({\n            id: user.id,\n            username: user.username,\n            firstName: user.firstName,\n            lastName: user.lastName,\n            email: user.email,\n            token: 'fake-jwt-token'\n        })\n    }\n\n    function register() {\n        const user = body\n\n        if (users.find(x => x.username === user.username)) {\n            return error('Username \"' + user.username + '\" is already taken')\n        }\n\n        user.id = users.length ? Math.max(...users.map(x => x.id)) + 1 : 1;\n        users.push(user);\n        localStorage.setItem('users', JSON.stringify(users));\n\n        return ok();\n    }\n\n    function getUsers() {\n        // tslint:disable-next-line:curly\n        if (!isLoggedIn()) return unauthorized();\n        return ok(users);\n    }\n\n\n    // helper functions\n\n    function ok(body?) {\n        return of(new HttpResponse({ status: 200, body }))\n    }\n\n    function error(message) {\n        return throwError({ error: { message } });\n    }\n\n    function unauthorized() {\n        return throwError({ status: 401, error: { message: 'Unauthorised' } });\n    }\n\n    function isLoggedIn() {\n        return headers.get('Authorization') === 'Bearer fake-jwt-token';\n    }\n}\n}\n\nexport const fakeBackendProvider = {\n// use fake backend in place of Http service for backend-less development\nprovide: HTTP_INTERCEPTORS,\nuseClass: BackendInterceptor,\nmulti: true\n};","import { environment } from './../../../../environments/environment.prod';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { User } from '../../user';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  constructor(private http: HttpClient) { }\n  // tslint:disable-next-line:typedef\n  getAll() {\n    return this.http.get<User[]>(`${environment.apiUrl}/users`);\n}\n// tslint:disable-next-line:typedef\nregister(user: User) {\n  return this.http.post(`${environment.apiUrl}/users/register`, user);\n}\n\n}\n","import { Component } from '@angular/core';\nimport { User } from './modules/user';\nimport { AuthenticationService } from './modules/login/services/authentication.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  currentUser: User;\n\n  constructor( ){} \n\n \n}","  \n<router-outlet></router-outlet>\n<!-- nav -->\n<!-- <nav class=\"navbar navbar-expand navbar-dark bg-dark\" *ngIf=\"currentUser\">\n    <div class=\"navbar-nav\">\n        <a class=\"nav-item nav-link\" routerLink=\"/\">Home</a>\n        <a class=\"nav-item nav-link\" (click)=\"logout()\">Logout</a>\n    </div>\n</nav> -->","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\n\nimport { LoginModule } from './modules/login/login.module';\nimport { RouterModule } from '@angular/router';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    LoginModule,\n    RouterModule,\n    BrowserAnimationsModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","export const environment = {\n  production: true,\n  apiUrl: 'http://localhost:4200'\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { LoginComponent } from './login/login.component';\nimport { RouterModule, Routes } from '@angular/router';\nimport {MatCardModule} from '@angular/material/card';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { SingupComponent } from './singup/singup.component';\nimport { AuthenticationService } from './services/authentication.service';\nimport { HomeComponent } from './home/home.component';\nimport { UserService } from './services/user.service';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { JwtInterceptor } from './jwt.interceptor';\nimport { ErrorInterceptor } from './error.interceptor';\nimport { fakeBackendProvider } from './backend.interceptor';\nimport { LoginGuard } from './login.guard';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatToolbarModule} from '@angular/material/toolbar';\n\n\n\nconst routes: Routes = [\n\n  { path: 'home', component: HomeComponent, canActivate: [LoginGuard] },\n\n  { path: 'login', component: LoginComponent},\n  { path: 'signup', component: SingupComponent},\n   // otherwise redirect to home\n   { path: '**', redirectTo: 'home' }\n];\n@NgModule({\n  declarations: [LoginComponent, SingupComponent,HomeComponent],\n  imports: [\n    CommonModule,\n    MatCardModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    FormsModule,\n    MatIconModule,\n    MatSnackBarModule,\n    MatToolbarModule,\n    RouterModule.forRoot(routes)\n  ],\n  providers: [AuthenticationService, UserService,\n    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\n    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },\n\n    // provider used to create fake backend\n    fakeBackendProvider],\n  exports: [RouterModule]\n})\nexport class LoginModule { }\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { HttpClient } from '@angular/common/http';\n\nimport { map } from 'rxjs/operators';\nimport { User } from '../../user';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  private currentUserSubject: BehaviorSubject<User>;\n  public currentUser: Observable<User>;\n\n  constructor(private http: HttpClient) {\n    this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n    this.currentUser = this.currentUserSubject.asObservable();\n}\n\npublic get currentUserValue(): User {\n  return this.currentUserSubject.value;\n}\n\n// tslint:disable-next-line:typedef\nlogin(username: string, password: string) {\n    return this.http.post<any>(`/users/authenticate`, { username, password })\n        .pipe(map(user => {\n            // login successful if there's a jwt token in the response\n            if (user && user.token) {\n                // store user details and jwt token in local storage to keep user logged in between page refreshes\n                localStorage.setItem('currentUser', JSON.stringify(user));\n                this.currentUserSubject.next(user);\n            }\n\n            return user;\n        }));\n}\nlogout() {\n  // remove user from local storage to log user out\n  localStorage.removeItem('currentUser');\n  this.currentUserSubject.next(null);\n}\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthenticationService } from '../services/authentication.service';\nimport { UserService } from '../services/user.service';\nimport { User } from '../../user';\nimport { first } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  currentUser: User;\n    users = [];\n\n    constructor(\n        private authenticationService: AuthenticationService,\n        private userService: UserService,\n        private router: Router,\n    ) {\n        this.currentUser = this.authenticationService.currentUserValue;\n          this.authenticationService.currentUser.subscribe(x => this.currentUser = x);\n    }\n\n    ngOnInit() {\n        this.loadAllUsers();\n    }\n\n    private loadAllUsers() {\n        this.userService.getAll()\n            .pipe(first())\n            .subscribe(users => this.users = users);\n    }\n\n    logout() {\n      this.authenticationService.logout();\n      this.router.navigate(['/login']);\n  }\n}\n","\n<div class=\"limiter\">\n    <div class=\"container\">\n        <mat-card class=\"login-card\">\n            <mat-toolbar>\n                <div class=\"logout\">\n                    <button mat-button (click)=\"logout()\">Logout\n                        <mat-icon>settings_power</mat-icon>\n                    </button>\n                </div>\n            </mat-toolbar>\n            <h1>Hi {{currentUser.firstName}}</h1>\n            <p>you are logged into our platform</p>\n            <p> FirstName:{{currentUser.firstName}}</p>\n            <p> LastName:{{currentUser.lastName}}</p>\n            <p>Email:{{currentUser.email}}</p>\n            <p> UserName:{{currentUser.username}}</p>\n            <h3>All registered users:</h3>\n            <table>\n                <tr>\n                    <th>First Name</th>\n                    <th>Last Name</th>\n                    <th>Username</th>\n                </tr>\n                <tr *ngFor=\"let user of users\">\n                    <td>{{user.firstName}}</td>\n                    <td>{{user.lastName}}</td>\n                    <td>{{user.username}}</td>\n                </tr>\n            </table>\n        </mat-card>\n    </div>\n</div>","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from './services/authentication.service';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuard implements CanActivate {\n constructor(\n        private router: Router,\n        private authenticationService: AuthenticationService\n    ) {}\n\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n        const currentUser = this.authenticationService.currentUserValue;\n        if (currentUser) {\n            // authorised so return true\n            return true;\n        }\n\n        // not logged in so redirect to login page with the return url\n        this.router.navigate(['/login'], { queryParams: { returnUrl: state.url }});\n        return false;\n    }\n}","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AuthenticationService } from './services/authentication.service';\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  constructor(private authenticationService: AuthenticationService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      // add authorization header with jwt token if available\n      // tslint:disable-next-line:prefer-const\n      let currentUser = this.authenticationService.currentUserValue;\n      console.log('usertoken',currentUser)\n      if (currentUser && currentUser.token) {\n          request = request.clone({\n              setHeaders: { \n                  Authorization: `Bearer ${currentUser.token}`\n              }\n          });\n      }\n\n      return next.handle(request);\n  }\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}